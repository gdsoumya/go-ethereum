apiVersion: v1
kind: Service
metadata:
  namespace: renchain
  name: bootnode
  labels:
    app: bootnode
spec:
  selector:
    app: bootnode
  ports:
    - name: discovery
      port: 30301
      protocol: UDP
    - name: http
      port: 8080
---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: renchain
  name: bootnode
  labels:
    app: bootnode
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: bootnode
  template:
    metadata:
      labels:
        app: bootnode
    spec:
      containers:
        - name: bootnode
          image: ethereum/client-go:alltools-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - "bootnode --nodekey=/etc/bootnode/node.key --verbosity=9"
          volumeMounts:
            - name: data
              mountPath: /etc/bootnode
          ports:
            - name: discovery
              containerPort: 30301
              protocol: UDP
        - name: bootnode-server
          image: ethereum/client-go:alltools-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - "while [ 1 ]; do echo -e \"HTTP/1.1 200 OK\n\nenode://$(bootnode -writeaddress --nodekey=/etc/bootnode/node.key)@$(POD_IP):30301\" | nc -l -v -p 8080 || break; done;"
          volumeMounts:
            - name: data
              mountPath: /etc/bootnode
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080
      initContainers:
        - name: genkey
          image: ethereum/client-go:alltools-latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - "bootnode --genkey=/etc/bootnode/node.key"
          volumeMounts:
            - name: data
              mountPath: /etc/bootnode
      volumes:
        - name: data
          emptyDir: {}